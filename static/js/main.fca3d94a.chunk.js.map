{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","title","console","log","JSON","stringify","react_default","a","createElement","src","alt","MovieGenre","_ref3","genre","className","Movie","_ref","genres","synopsis","map","x","idx","key","App","state","_renderMovies","_this","movies","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","res","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAgFA,SAASA,EAATC,GAAuC,IAAhBC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,MAE3B,OADAC,QAAQC,IAAI,iBAAiBC,KAAKC,UAAUL,IAExCM,EAAAC,EAAAC,cAAA,OAAKC,IAAKT,EAAQU,IAAKT,EAAOA,MAAOA,IAS7C,SAASU,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMM,UAAU,eAAeD,EAAM,KAS9BE,MA9Ef,SAAAC,GAAiD,IAAjCf,EAAiCe,EAAjCf,MAAOD,EAA0BgB,EAA1BhB,OAAQiB,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAEXR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACXR,EAAAC,EAAAC,cAACV,EAAD,CAAaE,OAAQA,EAAQC,MAAOA,KAGxCK,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACXR,EAAAC,EAAAC,cAAA,qBAAaP,EAAb,KACAK,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACVG,EAAOE,IAAI,SAACC,EAAEC,GAAH,OAASf,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOO,EAAGE,IAAKD,OAEpDf,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBACdI,MCiBFK,6MAzCbC,MAAQ,KAORC,cAAgB,WAKd,OAJeC,EAAKF,MAAMG,OAAOR,IAAK,SAAAC,GACpC,OAAOd,EAAAC,EAAAC,cAACoB,EAAD,CAAO3B,MAAOmB,EAAEnB,MAAOD,OAAQoB,EAAES,mBAAoBP,IAAKF,EAAEU,GACnEb,OAAQG,EAAEH,OAAQC,SAAUE,EAAEF,gBAKlCa,gCAAa,SAAAC,IAAA,IAAAL,EAAA,OAAAM,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUX,EAAKY,WADf,OACLX,EADKQ,EAAAI,KAEXrC,QAAQC,IAAI,UAAUC,KAAKC,UAAUsB,IACrCD,EAAKc,SAAS,CAACb,WAHJ,wBAAAQ,EAAAM,SAAAT,QAObM,SAAW,WACT,OAAOI,MAAM,6DACZC,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACdF,KAAK,SAAAE,GAAI,OAAEA,EAAKC,KAAKnB,SACrBoB,MAAM,SAAAC,GAAG,OAAE9C,QAAQC,IAAI,QAAQC,KAAKC,UAAU2C,0FAtB/CC,KAAKlB,8CA6BL,OADA7B,QAAQC,IAAI,UAEVG,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACZmC,KAAKzB,MAAMG,OAASsB,KAAKxB,gBAAkB,kBA5ClCyB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.fca3d94a.chunk.js","sourcesContent":["//import React, { Component } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport \"./Movie.css\"\r\n\r\n//import LinesEllipsis from 'react-lines-ellipsis';\r\n//import LinesEllipsis from '../node_modules/react-lines-ellipsis/lib/index.js';\r\n// class Movie extends Component{\r\n\r\n//     static propTypes = {\r\n//         title:PropTypes.string.isRequired,\r\n//         poster:PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render(){\r\n//         console.log(\"props:\"+JSON.stringify(this.props));\r\n//         return(\r\n//             <div>\r\n//                 <MoviePoster poster={this.props.poster}></MoviePoster>\r\n//                 <h1> TITLE: {this.props.title} </h1>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nfunction Movie({title, poster, genres, synopsis}){                // functional components.\r\n    return(\r\n        <div className=\"Movie\">\r\n\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} title={title}></MoviePoster>\r\n            </div>\r\n\r\n            <div className=\"Movie__Column\">\r\n                <h1> TITLE: {title} </h1>\r\n                <div className=\"Movie__Genres\"> \r\n                    {genres.map((x,idx)=><MovieGenre genre={x} key={idx}></MovieGenre>)}\r\n                </div> \r\n                <div className=\"Movie__Synopsis\"> \r\n                {synopsis}\r\n                    {/* <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                        >\r\n                    </LinesEllipsis> */}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres:PropTypes.array.isRequired,\r\n    synopsis:PropTypes.string.isRequired\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n// class MoviePoster extends Component{\r\n\r\n//     static propTypes = {\r\n//         poster:PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"this is a poster\" />        \r\n//         );\r\n//     }\r\n// }\r\n\r\n                    // todo: why {poster?}\r\nfunction MoviePoster( {poster, title} ){         // functional, dumb component. dosen't have state\r\n    console.log(\"passed poster:\"+JSON.stringify(poster));\r\n    return(\r\n        <img src={poster} alt={title} title={title}/>        \r\n    );\r\n}\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genre+\" \"}</span>\r\n    );\r\n}\r\n\r\nMovieGenre.propTypes={\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Movie;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport Movie from './Movie';\n\nclass App extends Component {                                         // class가 아닌, 그냥 function으로 정의했는데도 잘 되었었음. (9강 이전 자료.)\n\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() \n  //          -> componentWillUpdate() == true(if any di ff) -> render() -> componentDidUpdate\n\n  //componentWillMount(){ console.log(\"will mount\");}\n  //componentDidMount(){  console.log(\"did mount\"); }\n\n  state = { \n  };\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = ()=>{\n    const movies = this.state.movies.map( x=>{\n      return <Movie title={x.title} poster={x.medium_cover_image} key={x.id} \n      genres={x.genres} synopsis={x.synopsis}/>\n    });\n    return movies;\n  }\n\n  _getMovies = async ()=>{                // 만약 async가 안써져있다면, await는 동작x\n    const movies = await this._callApi()  // callApi의 RETURN value를 movies에 넣음\n    console.log(\"movies:\"+JSON.stringify(movies));\n    this.setState({movies});              // not called until _callApi() is completed!\n  };\n\n\n  _callApi = ()=>{\n    return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=like_count\")\n    .then(res=>res.json())\n    .then(json=>json.data.movies)\n    .catch(err=>console.log(\"err!:\"+JSON.stringify(err)))\n\n  }; \n\n\n  render(){\n    console.log(\"render\");\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// componentDidMount(){\n//   setTimeout( ()=>{\n//     this.setState({\n//       movies:[\n//         {name:\"Transpotting\", poster:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSPoWscJ1fl-tuc5YCC1p_C8WWmqW8QnXxnuqW9v1C6BBkMxjp8\"},\n//         {name:\"Matrix\", poster:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-7cVBsQSxisxN8xFes3uczZ_FNBXdBgF10fJhWXlB7Rf2lBdf8w\"},\n//         {name:\"FMJ\", poster:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSCWPJxjY781xhdikEO6dRElPop6kGDygGlMqgfEluzF95R29jBgw\"},\n//         {name:\"Oldboy\", poster:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQT0luJOTqE0t0ssurNHm1YLBVYT4xN0_lgRew3Samg8mUQ3TNFBw\"},\n//         {name:\"Start Wars\", poster:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRDWYm_H7w_iK66xkeB7LZfsar3JAx--KRG4z-cGCfiQXkC8du0Fg\"}\n//       ]\n//     });\n//   }, 2000);\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}